function calibrateSensors(obj,...
    dataPath,~,measedSensorList,measedPartsList,...
    model,taskSpecificParams)
%% Comparing the eccentrity of several "grid" dataset measured on the iCub Robot
% This script take dataset in the "grid" format (generated by
% reachRandomJointPositions [1] module) on the iCub robot and compare 
% the eccentrity of the force measurement. In theory the "grid" movement
% is slowly (so the only thing that matters is gravity) moving the legs,
% while the robot is fixed on the pole (so the only external force are 
% on the root_link). In theory then the measured force should be equal 
% to m*g , where g \in R^3 is the gravity expressed in the sensor frame. 
% Hence the measured force should lie on a sphere (eccentrities 0,0) in
% theory. However imperfect sensor can have a different eccentricities (
% but in general they remain linear, so the sphere become an ellipsoid).
% For more on the theory behind this script, check [2].
% [1] : https://github.com/robotology/codyco-modules/tree/master/src/misc/reachRandomJointPositions
% [2] : Traversaro, Silvio, Daniele Pucci, and Francesco Nori. 
%       "In situ calibration of six-axis force-torque sensors using accelerometer measurements."
%       Robotics and Automation (ICRA), 2015 IEEE International Conference on. IEEE, 2015.

% Get calibration map
calibrationMap = model.calibrationMap;

% Unwrap task specific parameters (defines 'calibedJointsIdxes')
Init.unWrap(taskSpecificParams);

% Advanced interface parameters
run accelerometersCalibratorDevConfig;

% Build inertial sensors parameters
modelParams = model.buildModelParams(...
    measedSensorList,measedPartsList,...
    {},[],...  % no need for calibration parts information
    mtbSensorAct);


%% build input data for calibration
%

switch loadSource
    case 'cache'
        load([dataPath '/dataCache.mat'],'data');
        
    case 'dumpFile'
        % build sensor data parser
        plot = false; loadJointPos = false;
        data = SensorsData(dataPath,subSamplingSize,...
            timeStart,timeStop,plot);
        data.setFilteringActive(filterSensorMeas);
        data.setResamplingActive(resampleSensorMeas); % if filtering is OFF, resampling will stay OFF
        [sensorsIdxListFile,sensMeasCell,time] = data.buildInputDataSet(loadJointPos,modelParams);
        
        % Save data in a Matlab file for faster access in further runs
        if saveToCache
            save([dataPath '/dataCache.mat'],'data');
        end
        
    otherwise
        disp('Unknown data source !!')
end

%% Do the calibration: offsets or matrix C
%

switch subtask
    case 'calibOffsets'
        obj.calibrateOffsets(sensorsIdxListFile,data,time,sensMeasCell,calibrationMap);
    case 'calibMatrixC'
        obj.calibrateMatrixC(sensorsIdxListFile,data,time,sensMeasCell,calibrationMap);
    otherwise
        error('Unknown subtask for accelerometers calibration!');
end

end

